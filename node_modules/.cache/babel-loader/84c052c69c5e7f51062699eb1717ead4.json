{"ast":null,"code":"var _jsxFileName = \"/home/missy/full_stack_open_course/part1/anecdotes/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Button = _ref => {\n  let {\n    handler,\n    text\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handler,\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n\n_c = Button;\n\nconst Vote = _ref2 => {\n  let {\n    qty\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"has \", qty, \" votes\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 3\n  }, this);\n};\n\n_c2 = Vote;\n\nconst App = () => {\n  _s();\n\n  const anecdotes = ['If it hurts, do it more often', 'Adding manpower to a late software project makes it later!', 'The first 90 percent of the code accounts for the first 10 percent of the development time...The remaining 10 percent of the code accounts for the other 90 percent of the development time.', 'Any fool can write code that a computer can understand. Good programmers write code that humans can understand.', 'Premature optimization is the root of all evil.', 'Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.', 'Programming without an extremely heavy use of console.log is same as if a doctor would refuse to use x-rays or blood tests when diagnosing patients'];\n  const anecdotesAndVotes = anecdotes.map(anecdote => ({\n    anecdote,\n    votes: 0\n  }));\n  const [selected, setSelected] = useState(0);\n  const [anecdoteVotes, setAnecdoteVotes] = useState(anecdotesAndVotes);\n\n  const handleNewAnecdote = () => {\n    const randomIdx = Math.floor(Math.random() * anecdotes.length);\n    setSelected(randomIdx);\n  };\n\n  const handleVote = () => {\n    const anecdote = anecdoteVotes[selected];\n    console.log(anecdoteVotes);\n    console.log(); // we've copied the object properly but how to update the state with a new array of same build as anecdoteVotes? is that a good structure anyway? preserving index is kinda crappy.. maybe it should be an object \n    // we need to return a new array wherein the element at index `selected` is the object literal on line 41\n    // we can update the state to be a slice from 0 to selected, concatenated with the new object, concatenated with a slice from selected onward\n\n    const newAnecdote = { ...anecdote,\n      votes: anecdote.votes += 1\n    };\n    const newAnecdotes = anecdoteVotes.slice(0, selected).concat(newAnecdote).concat();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [anecdotes[selected], /*#__PURE__*/_jsxDEV(Vote, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handler: handleVote,\n      text: \"vote\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handler: handleNewAnecdote,\n      text: \"randomize\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"CbGdv7zHolZmdM/Ko/p46A1+2y8=\");\n\n_c3 = App;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"Vote\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/home/missy/full_stack_open_course/part1/anecdotes/src/App.js"],"names":["useState","Button","handler","text","Vote","qty","App","anecdotes","anecdotesAndVotes","map","anecdote","votes","selected","setSelected","anecdoteVotes","setAnecdoteVotes","handleNewAnecdote","randomIdx","Math","floor","random","length","handleVote","console","log","newAnecdote","newAnecdotes","slice","concat"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;;;AAEA,MAAMC,MAAM,GAAG;AAAA,MAAC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAD;AAAA,sBACb;AAAA,2BACE;AAAQ,MAAA,OAAO,EAAED,OAAjB;AAAA,gBAA2BC;AAA3B;AAAA;AAAA;AAAA;AAAA;AADF,mBADa;AAAA,CAAf;;KAAMF,M;;AAMN,MAAMG,IAAI,GAAG;AAAA,MAAC;AAAEC,IAAAA;AAAF,GAAD;AAAA,sBACX;AAAA,uBACOA,GADP;AAAA;AAAA;AAAA;AAAA;AAAA,UADW;AAAA,CAAb;;MAAMD,I;;AAMN,MAAME,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAMC,SAAS,GAAG,CAChB,+BADgB,EAEhB,4DAFgB,EAGhB,8LAHgB,EAIhB,iHAJgB,EAKhB,iDALgB,EAMhB,oLANgB,EAOhB,qJAPgB,CAAlB;AAUA,QAAMC,iBAAiB,GAAGD,SAAS,CAACE,GAAV,CAAcC,QAAQ,KAC9C;AAAEA,IAAAA,QAAF;AAAYC,IAAAA,KAAK,EAAE;AAAnB,GAD8C,CAAtB,CAA1B;AAIA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACc,aAAD,EAAgBC,gBAAhB,IAAoCf,QAAQ,CAACQ,iBAAD,CAAlD;;AAEA,QAAMQ,iBAAiB,GAAG,MAAM;AAC9B,UAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBb,SAAS,CAACc,MAArC,CAAlB;AACAR,IAAAA,WAAW,CAACI,SAAD,CAAX;AACD,GAHD;;AAKA,QAAMK,UAAU,GAAG,MAAM;AACvB,UAAMZ,QAAQ,GAAGI,aAAa,CAACF,QAAD,CAA9B;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAYV,aAAZ;AACAS,IAAAA,OAAO,CAACC,GAAR,GAHuB,CAIvB;AACA;AACA;;AACA,UAAMC,WAAW,GAAG,EAAE,GAAGf,QAAL;AAAeC,MAAAA,KAAK,EAAED,QAAQ,CAACC,KAAT,IAAkB;AAAxC,KAApB;AACA,UAAMe,YAAY,GAAGZ,aAAa,CAACa,KAAd,CAAoB,CAApB,EAAuBf,QAAvB,EAClBgB,MADkB,CACXH,WADW,EAElBG,MAFkB,EAArB;AAGD,GAXD;;AAaA,sBACE;AAAA,eACGrB,SAAS,CAACK,QAAD,CADZ,eAEE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEU,UAAjB;AAA6B,MAAA,IAAI,EAAC;AAAlC;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEN,iBAAjB;AAAoC,MAAA,IAAI,EAAC;AAAzC;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CA5CD;;GAAMV,G;;MAAAA,G;AA8CN,eAAeA,GAAf","sourcesContent":["import { useState } from 'react'\n\nconst Button = ({ handler, text }) => (\n  <>\n    <button onClick={handler}>{text}</button>\n  </>\n)\n\nconst Vote = ({ qty }) => (\n  <p>\n    has {qty} votes\n  </p>\n)\n\nconst App = () => {\n  const anecdotes = [\n    'If it hurts, do it more often',\n    'Adding manpower to a late software project makes it later!',\n    'The first 90 percent of the code accounts for the first 10 percent of the development time...The remaining 10 percent of the code accounts for the other 90 percent of the development time.',\n    'Any fool can write code that a computer can understand. Good programmers write code that humans can understand.',\n    'Premature optimization is the root of all evil.',\n    'Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.',\n    'Programming without an extremely heavy use of console.log is same as if a doctor would refuse to use x-rays or blood tests when diagnosing patients'\n  ]\n   \n  const anecdotesAndVotes = anecdotes.map(anecdote => (\n    { anecdote, votes: 0 }\n  ));\n\n  const [selected, setSelected] = useState(0);\n  const [anecdoteVotes, setAnecdoteVotes] = useState(anecdotesAndVotes);\n\n  const handleNewAnecdote = () => {\n    const randomIdx = Math.floor(Math.random() * anecdotes.length);\n    setSelected(randomIdx)\n  }\n\n  const handleVote = () => {\n    const anecdote = anecdoteVotes[selected];\n    console.log(anecdoteVotes)\n    console.log();\n    // we've copied the object properly but how to update the state with a new array of same build as anecdoteVotes? is that a good structure anyway? preserving index is kinda crappy.. maybe it should be an object \n    // we need to return a new array wherein the element at index `selected` is the object literal on line 41\n    // we can update the state to be a slice from 0 to selected, concatenated with the new object, concatenated with a slice from selected onward\n    const newAnecdote = { ...anecdote, votes: anecdote.votes += 1 }\n    const newAnecdotes = anecdoteVotes.slice(0, selected)\n      .concat(newAnecdote)\n      .concat()\n  }\n\n  return (\n    <div>\n      {anecdotes[selected]}\n      <Vote />\n      <Button handler={handleVote} text='vote' />\n      <Button handler={handleNewAnecdote} text='randomize' />\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}